//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assignment7.PopulationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PopulationService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/currencyConvert", ReplyAction="http://tempuri.org/IService1/currencyConvertResponse")]
        double currencyConvert(string from, string to, double amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/currencyConvert", ReplyAction="http://tempuri.org/IService1/currencyConvertResponse")]
        System.Threading.Tasks.Task<double> currencyConvertAsync(string from, string to, double amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEstablishments", ReplyAction="http://tempuri.org/IService1/GetEstablishmentsResponse")]
        string[] GetEstablishments(string county, string state, string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEstablishments", ReplyAction="http://tempuri.org/IService1/GetEstablishmentsResponse")]
        System.Threading.Tasks.Task<string[]> GetEstablishmentsAsync(string county, string state, string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NaturalHazards", ReplyAction="http://tempuri.org/IService1/NaturalHazardsResponse")]
        string[] NaturalHazards(string state, string county);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NaturalHazards", ReplyAction="http://tempuri.org/IService1/NaturalHazardsResponse")]
        System.Threading.Tasks.Task<string[]> NaturalHazardsAsync(string state, string county);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NewsFocus", ReplyAction="http://tempuri.org/IService1/NewsFocusResponse")]
        string[] NewsFocus(string[] topics);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NewsFocus", ReplyAction="http://tempuri.org/IService1/NewsFocusResponse")]
        System.Threading.Tasks.Task<string[]> NewsFocusAsync(string[] topics);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPopulation", ReplyAction="http://tempuri.org/IService1/GetPopulationResponse")]
        int GetPopulation(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPopulation", ReplyAction="http://tempuri.org/IService1/GetPopulationResponse")]
        System.Threading.Tasks.Task<int> GetPopulationAsync(string state);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Assignment7.PopulationService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Assignment7.PopulationService.IService1>, Assignment7.PopulationService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double currencyConvert(string from, string to, double amount) {
            return base.Channel.currencyConvert(from, to, amount);
        }
        
        public System.Threading.Tasks.Task<double> currencyConvertAsync(string from, string to, double amount) {
            return base.Channel.currencyConvertAsync(from, to, amount);
        }
        
        public string[] GetEstablishments(string county, string state, string keyword) {
            return base.Channel.GetEstablishments(county, state, keyword);
        }
        
        public System.Threading.Tasks.Task<string[]> GetEstablishmentsAsync(string county, string state, string keyword) {
            return base.Channel.GetEstablishmentsAsync(county, state, keyword);
        }
        
        public string[] NaturalHazards(string state, string county) {
            return base.Channel.NaturalHazards(state, county);
        }
        
        public System.Threading.Tasks.Task<string[]> NaturalHazardsAsync(string state, string county) {
            return base.Channel.NaturalHazardsAsync(state, county);
        }
        
        public string[] NewsFocus(string[] topics) {
            return base.Channel.NewsFocus(topics);
        }
        
        public System.Threading.Tasks.Task<string[]> NewsFocusAsync(string[] topics) {
            return base.Channel.NewsFocusAsync(topics);
        }
        
        public int GetPopulation(string state) {
            return base.Channel.GetPopulation(state);
        }
        
        public System.Threading.Tasks.Task<int> GetPopulationAsync(string state) {
            return base.Channel.GetPopulationAsync(state);
        }
    }
}
